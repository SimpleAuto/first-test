"spf13
"vimrc的集成  

colorscheme tayra

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'Valloric/YouCompleteMe'
Plugin 'mileszs/ack.vim'
Plugin 'rking/ag.vim'


"跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样
"o 在一个新打开的窗口中显示光标下tag
"显示光标下tag的原型定义
"u 更新taglist窗口中的tag
"s 更改排序方式，在按名字排序和按出现顺序排序间切换
"x taglist窗口放大和缩小，方便查看较长的tag
"
"打开一个折叠，同zo
"将tag折叠起来，同zc
"打开所有的折叠，同zR
"= 将所有tag折叠起来，同zM
"[[ 跳到前一个文件
"]] 跳到后一个文件
"q 关闭taglist窗口

Bundle 'taglist.vim' 
let Tlist_Ctags_Cmd='ctags' 
let Tlist_Show_One_File=1 
"不同时显示多个文件的tag，只显示当前文件的 
let Tlist_WinWidt =28 
"设置taglist的宽度 
let Tlist_Exit_OnlyWindow=1 
"如果taglist窗口是最后一个窗口，则退出vim 
"let Tlist_Use_Right_Window=1            
"在右侧窗口中显示taglist窗口 
let Tlist_Use_Left_Windo =1 
"在左侧窗口中显示taglist窗口


"更多的配置请参看:help tagbar
"配置好之后可以使用:Tagbar或者按配置的快捷键F3开启
Bundle 'majutsushi/tagbar' 
"nmap <Leader>tb :TagbarToggle<CR>        
"快捷键设置 
let g:tagbar_ctags_bin='ctags' 
"ctags程序的路径 
let g:tagbar_width=30 
"窗口宽度的设置 
map <F3> :Tagbar<CR> 
"autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()     
"如果是c语言的程序的话，tagbar自动开启

"配置之后可以使用:NERDTree或者配置的快捷键F2开启。
Bundle 'scrooloose/nerdtree'
let NERDTreeWinPos='right'
let NERDTreeWinSize=30
map <F2> :NERDTreeToggle<CR>

"这里配置了F11和F12键来进行前后buffer的跳转，比较方便。
"如果要关闭某个buffer的话，可以使用命令:MBEbd [num]
"如果只是输入:MBEbd是关闭当前buffer，如果后面跟有buffer的数字标号，则关闭指定的buffer。
Bundle 'fholgado/minibufexpl.vim' 
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1 
let g:miniBufExplMoreThanOne=0 
map <F11> :MBEbp<CR> 
map <F12> :MBEbn<CR

"powerline
Bundle 'bling/vim-airline'
set laststatus=2

"快速查找
"<leader>-f模糊搜索最近打开的文件(MRU)
"<leader>-p模糊搜索当前目录及其子目录下的所有文件
"搜索框出来后, 输入关键字, 然后
"ctrl + j/k 进行上下选择
"ctrl + x 在当前窗口水平分屏打开文件
"ctrl + v 同上, 垂直分屏
"ctrl + t 在tab中打开
Bundle 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

"配合ctrlp使用，可以搜索函数
"使用fu
Bundle 'tacahiroy/ctrlp-funky'
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_extensions = ['funky']

"自动注释  选定行即可
"<leader>cc   加注释
"<leader>cu   解开注释
"<leader>c<space>  加上/解开注释, 智能判断
"<leader>cy   先复制, 再注解(p可以进行黏贴)
Bundle 'scrooloose/nerdcommenter'
" 注释的时候自动加个空格, 强迫症必配
let g:NERDSpaceDelims=1


call vundle#end()            " required
filetype plugin indent on    " required

"解决中文乱码问题
let termencoding=&encoding
set fileencodings=utf-8,gbk

"ack
let g:ackprg = 'ag --vimgrep'
nnoremap <Leader>a :Ack!<Space>

"ag
let g:ag_prg="<custom-ag-path-goes-here> --vimgerp"
let g:ag_working_path_mode="r"

"～/.vimrc
"youCompleteMe
set runtimepath+=~/.vim/bundle/YouCompleteMe
let g:ycm_collect_identifiers_from_tags_files = 1           " 开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释与字符串中的内容也用于补全
let g:syntastic_ignore_files=[".*\.py$"]
let g:ycm_seed_identifiers_with_syntax = 1                  " 语法关键字补全
let g:ycm_complete_in_comments = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  " 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
let g:ycm_complete_in_comments = 1                          " 在注释输入中也能补全
let g:ycm_complete_in_strings = 1                           " 在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_show_diagnostics_ui = 0                           " 禁用语法检查
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>" |            
" 回车即选中当前项
nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>|     
" 跳转到定义处
"let g:ycm_min_num_of_chars_for_completion=2                 "
"从第2个键入字符就开始罗列匹配项
"
"
set term=xterm-256color
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
imap ) <c-r>=ClosePair(')')<CR>
imap ] <c-r>=ClosePair(']')<CR>
imap } <c-r>=CloseBracket()<CR>
imap " <c-r>=QuoteDelim('"')<CR>
imap ' <c-r>=QuoteDelim("'")<CR>
inoremap { <c-r>=SET_BIG_PAIR()<CR>

function! SET_BIG_PAIR()
	if(&filetype=="php")
		if match( getline('.'),'"' )>= 0
			return "{}\<ESC>i"
		endif 
	endif 
	return "{\<CR>}\<ESC>O"
endf 

function! ClosePair(char)
	if getline('.')[col('.')-1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endf

function! CloseBracket()
	if match(getline(line('.')+1),'\s*}') <0
		return "\<CR>}"
	else
		return "\<ESC>j0f}a"
	endif
endf

function! QuoteDelim(char)
	let line = getline('.')
	let col  = col('.')

	if(&filetype == "vim")
		return a:char 
	endif

	if line[col-2] == "\\"
		return a:char
	elseif line[col-1] == a:char
		return "\<Right>"
	else
		return a:char.a:char."\<ESC>i"
	endif
endf

"设置代码折叠
set foldmethod=syntax
set tabstop=4
set history=50
set expandtab
set showcmd
set showmode
set ignorecase
set smartcase
set showmatch
set ruler
set incsearch
set hlsearch
set cul "高亮光标所在行
set cuc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""新文件标题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"新建.c,.h,.sh,.java文件，自动插入文件头
autocmd BufNewFile *.cpp,*.cc,*.[ch],*.hpp,*.sh,*.rb,*.java,*.py,*.js,*.ts exec ":call SetTitle()"
""定义函数SetTitle，自动插入文件头
func SetTitle()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1,"\#!/usr/bin/env bash")
        call append(line("."),   "########################################################################")
        call append(line(".")+1, "#    File Name: ".expand("%"))
        call append(line(".")+2, "# ")
        call append(line(".")+3, "#       Author: Thomas Shanghai,Inc.")
        call append(line(".")+4, "#         Mail: 982737593@qq.com")
        call append(line(".")+5, "# Created Time: ".strftime("%c"))
        call append(line(".")+6, "#  Description: ...")
        call append(line(".")+7, "# ")
        call append(line(".")+8, "########################################################################")
        call append(line(".")+9, "")
        call append(line(".")+10, "")
    elseif &filetype == 'python'
        call setline(1,"#!/usr/bin/env python")
        call append(line("."),"# -*- coding=utf-8 -*-")
        call append(line(".")+1, "########################################################################")
        call append(line(".")+2, "#    File Name: ".expand("%"))
        call append(line(".")+3, "# ")
        call append(line(".")+4, "#       Author: Thomas Shanghai,Inc.")
        call append(line(".")+5, "#         Mail: 982737593@qq.com")
        call append(line(".")+6, "# Created Time: ".strftime("%c"))
        call append(line(".")+7, "#  Description: ...")
        call append(line(".")+8, "#                ")
        call append(line(".")+9, "########################################################################")
        call append(line(".")+10, "")
        call append(line(".")+11, "")
        call append(line(".")+12, "if __name__ == '__main__':")
        call append(line(".")+13, "\tpass")
    elseif &filetype == 'py'
        call setline(1,"#!/usr/bin/env python")
        call append(line("."),"# -*- coding=utf-8 -*-")
        call append(line(".")+1, "########################################################################")
        call append(line(".")+2, "#    File Name: ".expand("%"))
        call append(line(".")+3, "# ")
        call append(line(".")+4, "#       Author: Thomas Shanghai,Inc.")
        call append(line(".")+5, "#         Mail: 982737593@qq.com")
        call append(line(".")+6, "# Created Time: ".strftime("%c"))
        call append(line(".")+7, "#  Description: ...")
        call append(line(".")+8, "#                ")
        call append(line(".")+9, "########################################################################")
        call append(line(".")+10, "")
        call append(line(".")+11, "")
        call append(line(".")+12, "if __name__ == '__main__':")
        call append(line(".")+13, "\tpass")
    elseif &filetype == 'lua'
        call setline(1,"-------------------------------------------------------------------------")
        call append(line("."), "--    File Name: ".expand("%"))
        call append(line(".")+1, "-- ")
        call append(line(".")+2, "--       Author: Thomas Shanghai,Inc.")
        call append(line(".")+3, "--         Mail: 982737593@qq.com ")
        call append(line(".")+4, "-- Created Time: ".strftime("%c"))
        call append(line(".")+5, "--  Description: ...")
        call append(line(".")+6, "-- ")
        call append(line(".")+7, "--")
        call append(line(".")+8, "-------------------------------------------------------------------------")
        call append(line(".")+9, "")
    elseif &filetype == 'ruby'
        call setline(1,"#!/usr/bin/env ruby")
        call append(line("."),"# encoding: utf-8")
        call append(line(".")+1, "")
    else
        call setline(1, "/*")
        call append(line("."),   " *************************************************************************")
        call append(line(".")+1, " *    File Name:  ".expand("%"))
        call append(line(".")+2, " *       Author: Thomas Shanghai,Inc.")
        call append(line(".")+3, " *         Mail: 982737593@qq.com")
        call append(line(".")+4, " * Created Time: ".strftime("%c"))
        call append(line(".")+5, " * ")
        call append(line(".")+6, " *  Description: ...")
        call append(line(".")+7, " * ")
        call append(line(".")+8, " ************************************************************************")
        call append(line(".")+9, "*/")
        call append(line(".")+10, "")
    endif
    if expand("%:e") == 'cpp'
        call append(line(".")+10, "#include<iostream>")
        call append(line(".")+11, "using namespace std;")
        call append(line(".")+12, "")
    elseif expand("%:e") == 'cc'
        call append(line(".")+10, "#include<iostream>")
        call append(line(".")+11, "using namespace std;")
        call append(line(".")+12, "")
    endif
    if &filetype == 'c'
        call append(line(".")+10, "#include<stdio.h>")
        call append(line(".")+11, "")
    endif
    if expand("%:e") == 'h'
        call append(line(".")+10, "#ifndef __".toupper(expand("%:r"))."__H")
        call append(line(".")+11, "#define __".toupper(expand("%:r"))."__H")
        call append(line(".")+12, "#endif")
    elseif expand("%:e") == 'hpp'
        call append(line(".")+10, "#ifndef __".toupper(expand("%:r"))."__H")
        call append(line(".")+11, "#define __".toupper(expand("%:r"))."__H")
        call append(line(".")+12, "#endif")
    endif
    if &filetype == 'java'
        call append(line(".")+10,"public class ".expand("%:r"))
        call append(line(".")+11,"")
    endif
    "新建文件后，自动定位到文件末尾
endfunc
autocmd BufNewFile * normal G
