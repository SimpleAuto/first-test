!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALERT_LOG	log.h	10;"	d
ALERT_LOG	log.h	8;"	d
AsyncServInterface	dll.h	/^typedef struct AsyncServInterface $/;"	s
BASE_SINK_BIND_PORT	tlog_decl.h	92;"	d
BOOT_FAIL	tlog.c	384;"	d	file:
BOOT_LOG	log.h	13;"	d
BOOT_LOG	log.h	15;"	d
BOOT_OK	tlog.c	383;"	d	file:
CC	Makefile	/^CC     = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -DDEBUG -D_GNU_SOURCE -DEPOLL_MODE -DUSE_TLOG $/;"	m
CHECK_DISKFULL_DUR	tlog_decl.h	58;"	d
CHECK_INIT_DEPEND	tlog.c	102;"	d	file:
CHECK_INIT_DEPEND	tlog.c	112;"	d	file:
CONFIG_VAL_SIZE	config.c	12;"	d	file:
DAILY_MAX_FILES	tlog_decl.h	84;"	d
DEF_RATE_LIMIT	tlog_decl.h	78;"	d
DEPDIR	Makefile	/^DEPDIR = $(WORKDIR)\/obj$/;"	m
DEPS	Makefile	/^DEPS   := $(patsubst %.c,%.d,$(subst $(SRCDIR),$(DEPDIR),$(SRCS)))$/;"	m
DIR_SEPARATOR	fileutils.h	44;"	d
DONT_SHIFT	tlog_decl.h	67;"	d
DO_SHIFT	tlog_decl.h	69;"	d
ERROR_LOG	log.h	18;"	d
ERROR_LOG	log.h	20;"	d
ERROR_TLOG	tlog_mcast.h	24;"	d
FATAL_TLOG	tlog_mcast.h	13;"	d
FILE_ERROR_ACCES	fileutils.h	/^    FILE_ERROR_ACCES,$/;"	e	enum:__anon2
FILE_ERROR_AGAIN	fileutils.h	/^    FILE_ERROR_AGAIN,$/;"	e	enum:__anon2
FILE_ERROR_BADF	fileutils.h	/^    FILE_ERROR_BADF,$/;"	e	enum:__anon2
FILE_ERROR_EXIST	fileutils.h	/^    FILE_ERROR_EXIST,$/;"	e	enum:__anon2
FILE_ERROR_FAILED	fileutils.h	/^    FILE_ERROR_FAILED$/;"	e	enum:__anon2
FILE_ERROR_FAULT	fileutils.h	/^    FILE_ERROR_FAULT,$/;"	e	enum:__anon2
FILE_ERROR_INTR	fileutils.h	/^    FILE_ERROR_INTR,$/;"	e	enum:__anon2
FILE_ERROR_INVAL	fileutils.h	/^    FILE_ERROR_INVAL,$/;"	e	enum:__anon2
FILE_ERROR_IO	fileutils.h	/^    FILE_ERROR_IO,$/;"	e	enum:__anon2
FILE_ERROR_ISDIR	fileutils.h	/^    FILE_ERROR_ISDIR,$/;"	e	enum:__anon2
FILE_ERROR_LOOP	fileutils.h	/^    FILE_ERROR_LOOP,$/;"	e	enum:__anon2
FILE_ERROR_MFILE	fileutils.h	/^    FILE_ERROR_MFILE,$/;"	e	enum:__anon2
FILE_ERROR_NAMETOOLONG	fileutils.h	/^    FILE_ERROR_NAMETOOLONG,$/;"	e	enum:__anon2
FILE_ERROR_NFILE	fileutils.h	/^    FILE_ERROR_NFILE,$/;"	e	enum:__anon2
FILE_ERROR_NODEV	fileutils.h	/^    FILE_ERROR_NODEV,$/;"	e	enum:__anon2
FILE_ERROR_NOENT	fileutils.h	/^    FILE_ERROR_NOENT,$/;"	e	enum:__anon2
FILE_ERROR_NOMEM	fileutils.h	/^    FILE_ERROR_NOMEM,$/;"	e	enum:__anon2
FILE_ERROR_NOSPC	fileutils.h	/^    FILE_ERROR_NOSPC,$/;"	e	enum:__anon2
FILE_ERROR_NOSYS	fileutils.h	/^    FILE_ERROR_NOSYS,$/;"	e	enum:__anon2
FILE_ERROR_NOTDIR	fileutils.h	/^    FILE_ERROR_NOTDIR,$/;"	e	enum:__anon2
FILE_ERROR_NXIO	fileutils.h	/^    FILE_ERROR_NXIO,$/;"	e	enum:__anon2
FILE_ERROR_PERM	fileutils.h	/^    FILE_ERROR_PERM,$/;"	e	enum:__anon2
FILE_ERROR_PIPE	fileutils.h	/^    FILE_ERROR_PIPE,$/;"	e	enum:__anon2
FILE_ERROR_ROFS	fileutils.h	/^    FILE_ERROR_ROFS,$/;"	e	enum:__anon2
FILE_ERROR_TXTBSY	fileutils.h	/^    FILE_ERROR_TXTBSY,$/;"	e	enum:__anon2
FILE_TEST_EXISTS	fileutils.h	/^    FILE_TEST_EXISTS        = 1 << 4$/;"	e	enum:__anon3
FILE_TEST_IS_DIR	fileutils.h	/^    FILE_TEST_IS_DIR        = 1 << 2,$/;"	e	enum:__anon3
FILE_TEST_IS_EXECUTABLE	fileutils.h	/^    FILE_TEST_IS_EXECUTABLE = 1 << 3,$/;"	e	enum:__anon3
FILE_TEST_IS_REGULAR	fileutils.h	/^    FILE_TEST_IS_REGULAR    = 1 << 0,$/;"	e	enum:__anon3
FILE_TEST_IS_SYMLINK	fileutils.h	/^    FILE_TEST_IS_SYMLINK    = 1 << 1,$/;"	e	enum:__anon3
HEADERS	Makefile	/^HEADERS = $(wildcard $(INCLUDEDIR)\/*.h)$/;"	m
INCLUDEDIR	Makefile	/^INCLUDEDIR = $(WORKDIR)\/async$/;"	m
INIKEY_HASHBITS	config.c	11;"	d	file:
INIT_DEFAULT_LOGGER_SYSTEM	tlog.h	8;"	d
INIT_LIST_HEAD	list.h	15;"	d
IS_DIR_SEPARATOR	fileutils.h	45;"	d
LIBDIR	Makefile	/^LIBDIR = $(WORKDIR)\/libserver$/;"	m
LIBS	Makefile	/^LIBS   = -lpthread -ldl$/;"	m
LIBTAOMEE_ARCH_I386_ATOMIC_	atomic.h	15;"	d
LOCK	atomic.h	17;"	d
LOGTYPE_HEAD	tlog_decl.h	82;"	d
MAX_BASENAME_LEN	tlog_decl.h	41;"	d
MAX_GAMEID	tlog_decl.h	72;"	d
MAX_HOSTNAME_LEN	tlog_decl.h	39;"	d
MAX_INFOSTR_LEN	tlog_decl.h	42;"	d
MAX_LOG_CNT	log_fun.c	14;"	d	file:
MAX_ONE_LOG_SIZE	tlog_decl.h	50;"	d
MAX_PREFIX_LEN	tlog_decl.h	35;"	d
MAX_PROCNAME_LEN	tlog_decl.h	38;"	d
MAX_RATE_LIMIT	tlog_decl.h	76;"	d
MAX_SLICE_NO	tlog_decl.h	45;"	d
MAX_SVC_NAME_LEN	tlog_decl.h	37;"	d
MAX_SVRTYPE_LEN	tlog_decl.h	36;"	d
MAX_TIMESTR_LEN	tlog_decl.h	40;"	d
MAX_TRACE_TIME	tlog_decl.h	89;"	d
MAX_TRACE_UID_NUM	tlog_decl.h	33;"	d
MIN_ONE_LOG_SIZE	tlog_decl.h	53;"	d
MIN_RATE_LIMIT	tlog_decl.h	80;"	d
MIN_TRACE_TIME	tlog_decl.h	87;"	d
MIN_WAIT_UDP_SINK_TIME	tlog_decl.h	61;"	d
NIL	tlog_decl.h	56;"	d
OBJDIR	Makefile	/^OBJDIR = $(WORKDIR)\/obj$/;"	m
OBJS	Makefile	/^OBJS   := $(patsubst %.c,%.o,$(subst $(SRCDIR),$(OBJDIR),$(SRCS)))$/;"	m
RT_BOOT_TLOG	tlog_mcast.h	7;"	d
RT_ERROR_TLOG	tlog_mcast.h	18;"	d
SCREEN_COLS	tlog.c	382;"	d	file:
SET_DAILY_MAX_FILES	tlog_mcast.h	37;"	d
SET_LOG_LEVEL	tlog_mcast.h	30;"	d
SET_MAX_ONE_SIZE	tlog_mcast.h	44;"	d
SET_STOP_IF_DISKFULL	tlog_mcast.h	51;"	d
SET_TIME_SLICE_SECS	tlog_mcast.h	58;"	d
SRCDIR	Makefile	/^SRCDIR = $(WORKDIR)\/async$/;"	m
SRCS	Makefile	/^SRCS    = $(wildcard $(SRCDIR)\/*.c)$/;"	m
TARGET	Makefile	/^TARGET = $(WORKDIR)\/async\/AsyncServer$/;"	m
TFileError	fileutils.h	/^}TFileError;$/;"	t	typeref:enum:__anon2
TFileTest	fileutils.h	/^}TFileTest;$/;"	t	typeref:enum:__anon3
TLOG_BUF_SIZE	tlog_decl.h	64;"	d
TLOG_ETH0	tlog_decl.h	95;"	d
TLOG_ETH1	tlog_decl.h	96;"	d
TLOG_ETH2	tlog_decl.h	97;"	d
UDP_SINK_BIND_IP	tlog_decl.h	91;"	d
UDP_SINK_SEND_PORT	tlog_decl.h	93;"	d
WORKDIR	Makefile	/^WORKDIR=..\/$/;"	m
_BINDCONF_H_	bindconf.h	2;"	d
_CONFIG_H_	config.h	2;"	d
_DEAMON_H_	daemon.h	2;"	d
_DLL_H_	dll.h	2;"	d
_FILEUTILS_H_	fileutils.h	2;"	d
_GLOBAL_H_	global.h	2;"	d
_HASH_R_H	hash_r.h	2;"	d
_LIST_H_	list.h	2;"	d
_LOG_FUN_H_	log_fun.h	2;"	d
_LOG_H	log.h	2;"	d
_NETUTILS_H_	netutils.h	2;"	d
_NET_H_	net.h	2;"	d
_SERVICE_H_	service.h	13;"	d
_SHMQ_H_	shmq.h	2;"	d
_TIMER_H_	timer.h	2;"	d
_TLOG_DECL_H_	tlog_decl.h	2;"	d
_TLOG_H	tlog.h	2;"	d
_TLOG_MCAST_H_	tlog_mcast.h	2;"	d
_TYPES_H_	types.h	2;"	d
_UTIL_H_	util.h	2;"	d
__builtin_prefetch	list.h	9;"	d
__list_add	list.h	/^static inline void __list_add(struct list_head* new_entry,struct list_head* prev,struct list_head* next)$/;"	f
_logfile_info	tlog_decl.h	/^typedef struct _logfile_info$/;"	s
_logger	tlog_decl.h	/^typedef struct _logger $/;"	s
_logger_ctrl_cfg	tlog_decl.h	/^typedef struct _logger_ctrl_cfg$/;"	s
_logger_ctrl_pkg	netutils.h	/^typedef struct _logger_ctrl_pkg $/;"	s
_logger_set_rate_limit	netutils.h	/^typedef struct _logger_set_rate_limit $/;"	s
_logger_set_trace_addr	netutils.h	/^typedef struct _logger_set_trace_addr $/;"	s
_logger_set_trace_uid	netutils.h	/^typedef struct _logger_set_trace_uid $/;"	s
_logger_svc_info	tlog_decl.h	/^typedef struct _logger_svc_info $/;"	s
_logger_udp_sink	tlog_decl.h	/^typedef struct _logger_udp_sink $/;"	s
_pkg_trace_uid	netutils.h	/^typedef struct _pkg_trace_uid $/;"	s
_rate_limit	tlog_decl.h	/^typedef struct _rate_limit $/;"	s
_trace_uid	tlog_decl.h	/^typedef struct _trace_uid $/;"	s
add_to_trace_uid_list	netutils.c	/^int add_to_trace_uid_list(time_t now, pkg_trace_uid_t *pkg_trace_uid)$/;"	f
addr	shmq.h	/^    shm_head_t *addr;$/;"	m	struct:shm_queue
addr_changed	tlog_decl.h	/^    int                 addr_changed;$/;"	m	struct:_logger_udp_sink
arg_end	daemon.c	/^static char*    arg_end;$/;"	v	file:
arg_start	daemon.c	/^static char*    arg_start;$/;"	v	file:
async_serv_if_t	dll.h	/^} async_serv_if_t;$/;"	t	typeref:struct:AsyncServInterface
atomic_add	atomic.h	/^atomic_add (int i, atomic_t * v)$/;"	f
atomic_add_negative	atomic.h	/^atomic_add_negative (int i, atomic_t * v)$/;"	f
atomic_add_return	atomic.h	/^atomic_add_return (int i, atomic_t * v)$/;"	f
atomic_clear_mask	atomic.h	208;"	d
atomic_dec	atomic.h	/^atomic_dec (atomic_t * v)$/;"	f
atomic_dec_and_test	atomic.h	/^atomic_dec_and_test (atomic_t * v)$/;"	f
atomic_dec_return	atomic.h	205;"	d
atomic_inc	atomic.h	/^atomic_inc (atomic_t * v)$/;"	f
atomic_inc_and_test	atomic.h	/^atomic_inc_and_test (atomic_t * v)$/;"	f
atomic_inc_return	atomic.h	200;"	d
atomic_read	atomic.h	33;"	d
atomic_set	atomic.h	40;"	d
atomic_set_mask	atomic.h	212;"	d
atomic_sub	atomic.h	/^atomic_sub (int i, atomic_t * v)$/;"	f
atomic_sub_and_test	atomic.h	/^atomic_sub_and_test (int i, atomic_t * v)$/;"	f
atomic_sub_return	atomic.h	/^atomic_sub_return (int i, atomic_t * v)$/;"	f
atomic_t	atomic.h	/^} atomic_t;$/;"	t	typeref:struct:__anon6
backgd_mode	daemon.c	/^static int      backgd_mode = 0;$/;"	v	file:
base_filename	log_fun.c	/^	char	base_filename[64];$/;"	m	struct:fds_t	file:
base_filename_len	log_fun.c	/^	int		base_filename_len;$/;"	m	struct:fds_t	file:
baselen	tlog_decl.h	/^    int                 baselen;$/;"	m	struct:_logfile_info
basename	tlog_decl.h	/^    char                basename[MAX_BASENAME_LEN];$/;"	m	struct:_logfile_info
before_reload	dll.h	/^	int		(*before_reload)(int isparent);$/;"	m	struct:AsyncServInterface
bind_conf_max_field_num	bindconf.c	/^    bind_conf_max_field_num = 4 $/;"	e	enum:__anon1	file:
bind_config	bindconf.h	/^typedef struct bind_config {$/;"	s
bind_config_elem	bindconf.h	/^typedef struct bind_config_elem {$/;"	s
bind_config_elem_t	bindconf.h	/^}bind_config_elem_t;$/;"	t	typeref:struct:bind_config_elem
bind_config_t	bindconf.h	/^}bind_config_t;$/;"	t	typeref:struct:bind_config
bind_ip	bindconf.h	/^    char        bind_ip[16];$/;"	m	struct:bind_config_elem
bind_num	bindconf.h	/^    int                 bind_num;$/;"	m	struct:bind_config
bind_port	bindconf.h	/^    in_port_t   bind_port;$/;"	m	struct:bind_config_elem
bindconf	bindconf.c	/^bind_config_t bindconf;$/;"	v
blk_cnt	shmq.h	/^    atomic_t blk_cnt;$/;"	m	struct:shm_head
body	netutils.h	/^    uint8_t             body[];$/;"	m	struct:_logger_ctrl_pkg
boot_tlog	tlog.c	/^void boot_tlog(int ok,int dummy,const char* fmt,...)$/;"	f
chg_limit	tlog_decl.h	/^    int32_t             chg_limit;$/;"	m	struct:_rate_limit
child_pids	daemon.c	/^atomic_t child_pids[max_listen_fds];$/;"	v
cmd	netutils.h	/^    uint32_t            cmd;$/;"	m	struct:_logger_ctrl_pkg
config_append_value	config.c	/^int config_append_value(const char* key,const char *val)$/;"	f
config_get_intval	config.c	/^int config_get_intval(const char*key,int def)$/;"	f
config_get_strval	config.c	/^char* config_get_strval(const char* key)$/;"	f
config_init	config.c	/^int config_init(const char* file_name)$/;"	f
config_key_hash	config.c	/^static inline struct list_head* config_key_hash(const char* key)$/;"	f	file:
config_max_log_files	log_fun.c	/^static int         config_max_log_files;           \/\/ 保存原有的max_log_files$/;"	v	file:
config_pair	config.h	/^typedef struct config_pair{$/;"	s
config_pair_t	config.h	/^}config_pair_t;$/;"	t	typeref:struct:config_pair
config_reset_or_add_value	config.c	/^static int  config_reset_or_add_value( const char *  k,  const char *  v)$/;"	f	file:
config_update_value	config.c	/^int config_update_value(const char* key,const char* val)$/;"	f
configs	bindconf.h	/^    bind_config_elem_t  configs[max_listen_fds];$/;"	m	struct:bind_config
count	netutils.h	/^	uint32_t			count;$/;"	m	struct:_logger_set_trace_uid
counter	atomic.h	/^  volatile int counter;$/;"	m	struct:__anon6
create_new_logfile	tlog.c	/^int create_new_logfile(logfile_t *logfile)$/;"	f
ctrl_cfg	tlog.c	/^logger_ctrl_cfg_t logger_ctrl_cfg_struct, *ctrl_cfg = &logger_ctrl_cfg_struct;$/;"	v
cur_day_seq_count	log_fun.c	/^	int  	cur_day_seq_count;\/\/当天轮转文件的个数$/;"	m	struct:fds_t	file:
current_dir	main.c	/^char *current_dir;$/;"	v
daemon_start	daemon.c	/^int daemon_start(int argc, char** argv)$/;"	f
daily_max_files	tlog_decl.h	/^    int32_t             daily_max_files;$/;"	m	struct:_logger_ctrl_cfg
daily_seq	tlog_decl.h	/^    int32_t             daily_seq;$/;"	m	struct:_logfile_info
data_handle	dll.h	/^	void*   data_handle; \/\/ Hold the handle returned by dlopen$/;"	m	struct:AsyncServInterface
day	log_fun.c	/^	int		day;$/;"	m	struct:fds_t	file:
def_ctrl_cfg_t	tlog_decl.h	/^enum def_ctrl_cfg_t {$/;"	g
def_daily_max_files	tlog_decl.h	/^    def_daily_max_files         = 0, \/\/ 没有每日文件数量上限$/;"	e	enum:def_ctrl_cfg_t
def_log_level	tlog_decl.h	/^    def_log_level               = tlog_lvl_debug,$/;"	e	enum:def_ctrl_cfg_t
def_max_one_size	tlog_decl.h	/^    def_max_one_size            = 100, \/\/ 每个文件的上限: 100 MB$/;"	e	enum:def_ctrl_cfg_t
def_page_size	net.h	/^	def_page_size = 8192$/;"	e	enum:__anon4
def_stop_if_diskfull	tlog_decl.h	/^    def_stop_if_diskfull        = 1, \/\/ 当磁盘满时, 停止写文件 (但从udp_sink可发日志)$/;"	e	enum:def_ctrl_cfg_t
def_time_slice_secs	tlog_decl.h	/^    def_time_slice_secs         = 900, \/\/ 不要每隔多少时间就创建一个新文件, 一直写;$/;"	e	enum:def_ctrl_cfg_t
dll	dll.c	/^async_serv_if_t dll;$/;"	v
do_send_overflow	netutils.c	/^void do_send_overflow(void)$/;"	f
do_set_rate_limit	netutils.c	/^int do_set_rate_limit(int fd, time_t now,logger_ctrl_pkg_t *pkg, struct sockaddr_in *from,socklen_t fromlen)$/;"	f
do_set_trace_addr	netutils.c	/^int do_set_trace_addr(int fd, time_t now,logger_ctrl_pkg_t *pkg, struct sockaddr_in *from,socklen_t fromlen)$/;"	f
do_set_trace_uid	netutils.c	/^int do_set_trace_uid(int fd, time_t now,logger_ctrl_pkg_t *pkg, struct sockaddr_in *from,socklen_t fromlen)$/;"	f
dup_argv	daemon.c	/^static inline void dup_argv(int argc,char **argv)$/;"	f	file:
env_start	daemon.c	/^static char*    env_start;$/;"	v	file:
expire_time	tlog_decl.h	/^    int32_t             expire_time;$/;"	m	struct:_trace_uid
fd	service.h	/^	int			fd;$/;"	m	struct:fdsession
fd	tlog_decl.h	/^    int                 fd;$/;"	m	struct:_logfile_info
fds_info	log_fun.c	/^} fds_info[log_lvl_max];$/;"	v	typeref:struct:fds_t	file:
fds_t	log_fun.c	/^static struct fds_t $/;"	s	file:
fdsession	service.h	/^typedef struct fdsession $/;"	s
fdsession_t	service.h	/^} fdsession_t;$/;"	t	typeref:struct:fdsession
file_len	tlog_decl.h	/^    int64_t             file_len;$/;"	m	struct:_logfile_info
fini_service	dll.h	/^	int 	(*fini_service)(int isparent);$/;"	m	struct:AsyncServInterface
g_log_dest	log_fun.c	/^static log_dest_t  g_log_dest = log_dest_terminal; \/\/ 将日志输出到屏幕上$/;"	v	file:
g_logtime_interval	log_fun.c	/^static int         g_logtime_interval;             \/\/ 每个日志文件记录日志的总时间(秒)$/;"	v	file:
g_progame_name	main.c	/^char g_progame_name[256];$/;"	v
g_send_buf_limit_size	net.c	/^uint32_t  g_send_buf_limit_size;$/;"	v
gameid	tlog_decl.h	/^    int                 gameid; $/;"	m	struct:_logger_svc_info
gen_timestring	tlog.c	/^int gen_timestring(char *buf,int maxlen,logfile_t *log_file,char *datedir)$/;"	f
get_log_seq_nonrecycle	log_fun.c	/^static int get_log_seq_nonrecycle(int lvl)$/;"	f	file:
get_log_seq_recycle	log_fun.c	/^static int get_log_seq_recycle(int lvl)$/;"	f	file:
get_log_time	log_fun.c	/^static inline int get_log_time()$/;"	f	file:
get_logfile_seqno	log_fun.c	/^static inline int  get_logfile_seqno(const char* filename, int loglvl)$/;"	f	file:
get_pkg_len	dll.h	/^	int		(*get_pkg_len)(int fd, const void* avail_data, int avail_len, int isparent);$/;"	m	struct:AsyncServInterface
get_time_slice_no	tlog.c	/^int get_time_slice_no(logfile_t *logfile,char *datedir,struct tm *tm)$/;"	f
handle	dll.h	/^	void*   handle; \/\/ Hold the handle returned by dlopen$/;"	m	struct:AsyncServInterface
has_init	config.c	/^static int has_init;$/;"	v	file:
has_init	log_fun.c	/^static int         has_init;$/;"	v	file:
hash_key	config.c	/^static inline int hash_key(const char* key)$/;"	f	file:
hash_r5	hash_r.h	/^static inline uint32_t hash_r5(const char* p)$/;"	f
head	shmq.h	/^    volatile int head;$/;"	m	struct:shm_head
hostname	tlog_decl.h	/^    char                hostname[MAX_HOSTNAME_LEN]; \/\/ 实际是ip$/;"	m	struct:_logger_svc_info
id	service.h	/^	uint32_t	id;$/;"	m	struct:fdsession
infostr	tlog_decl.h	/^    char                infostr[MAX_INFOSTR_LEN];$/;"	m	struct:_logfile_info
infostrlen	tlog_decl.h	/^    int                 infostrlen;$/;"	m	struct:_logfile_info
ini_key_head	config.c	/^static list_head_t ini_key_head[1 << INIKEY_HASHBITS];$/;"	v	file:
init	tlog_decl.h	/^    int                 init;$/;"	m	struct:_logger_ctrl_cfg
init	tlog_decl.h	/^    int                 init;$/;"	m	struct:_logger_svc_info
init_logfile	tlog.c	/^void init_logfile(logfile_t *logfile)$/;"	f
init_logger	tlog.c	/^int init_logger(const char* dir, const char* prefix)$/;"	f
init_logger_ctrl_cfg	tlog.c	/^int init_logger_ctrl_cfg(int lvl, int daily_max_files, size_t max_one_size, int stop_if_diskfull,  int time_slice_secs)$/;"	f
init_logger_svc_info	tlog.c	/^int init_logger_svc_info(const char* svcname, int gameid, const char* svrtype)$/;"	f
init_logger_udp_sink_sendfd	netutils.c	/^int init_logger_udp_sink_sendfd(void)$/;"	f
init_service	dll.h	/^	int 	(*init_service)(int isparent);$/;"	m	struct:AsyncServInterface
ip	netutils.h	/^	char				ip[INET_ADDRSTRLEN];$/;"	m	struct:_logger_set_trace_addr
ip	tlog_decl.h	/^    char                ip[INET_ADDRSTRLEN];$/;"	m	struct:_logger_udp_sink
is_need_shift_file	tlog.c	/^int is_need_shift_file(logfile_t *logfile)$/;"	f
k_page_size	tlog.c	/^static int64_t k_page_size;$/;"	v	file:
key	config.h	/^	char key[];$/;"	m	struct:config_pair
last_check_diskfull_time	tlog_decl.h	/^	time_t				last_check_diskfull_time;$/;"	m	struct:_logger
last_rate_time	tlog_decl.h	/^    time_t              last_rate_time;$/;"	m	struct:_rate_limit
lc_set_rate_limit	netutils.h	/^    lc_set_rate_limit       = 1004,$/;"	e	enum:logger_cmd
lc_set_trace_addr	netutils.h	/^    lc_set_trace_addr       = 1003,$/;"	e	enum:logger_cmd
lc_set_trace_uid	netutils.h	/^    lc_set_trace_uid        = 1001,$/;"	e	enum:logger_cmd
lc_unset_trace_uid	netutils.h	/^    lc_unset_trace_uid      = 1002,$/;"	e	enum:logger_cmd
len	netutils.h	/^    uint32_t            len;$/;"	m	struct:_logger_ctrl_pkg
length	shmq.h	/^    unsigned int length;$/;"	m	struct:shm_queue
life_time	netutils.h	/^	int32_t				life_time;$/;"	m	struct:_pkg_trace_uid
limit	netutils.h	/^	int32_t				limit;$/;"	m	struct:_logger_set_rate_limit
limit	tlog_decl.h	/^    int32_t             limit;$/;"	m	struct:_rate_limit
list	config.h	/^	struct list_head list;$/;"	m	struct:config_pair	typeref:struct:config_pair::list_head
list_add	list.h	/^static inline void list_add(struct list_head* new_entry,struct list_head* head)$/;"	f
list_entry	list.h	25;"	d
list_for_each_entry	list.h	34;"	d
list_head	list.h	/^struct list_head{$/;"	s
list_head_t	list.h	/^typedef struct list_head list_head_t;$/;"	t	typeref:struct:list_head
load_bind_file	bindconf.c	/^int load_bind_file(const char* file_name)$/;"	f
log_buf_sz	log_fun.c	/^	log_buf_sz	= 8192$/;"	e	enum:__anon7	file:
log_dest	log_fun.h	/^typedef enum log_dest $/;"	g
log_dest_both	log_fun.h	/^	log_dest_both		= 3$/;"	e	enum:log_dest
log_dest_file	log_fun.h	/^	log_dest_file		= 2,$/;"	e	enum:log_dest
log_dest_t	log_fun.h	/^} log_dest_t;$/;"	t	typeref:enum:log_dest
log_dest_terminal	log_fun.h	/^	log_dest_terminal	= 1,$/;"	e	enum:log_dest
log_dir	log_fun.c	/^static char        log_dir[256];                   \/\/ log的路径$/;"	v	file:
log_file_name	log_fun.c	/^static inline void log_file_name(int lvl, int seq, char *file_name, const struct tm *tm)$/;"	f	file:
log_file_path	log_fun.c	/^static inline void log_file_path(int lvl, int seq, char *file_name, const struct tm *tm)$/;"	f	file:
log_init	log_fun.c	/^int log_init(const char* dir, log_lvl_t lvl, uint32_t size, int maxfiles, const char* pre_name)$/;"	f
log_init_ex	util.c	/^int log_init_ex(const char* dir,log_lvl_t lvl, uint32_t size, int maxfiles, const char* pre_name, uint32_t logtime)$/;"	f
log_init_t	log_fun.c	/^int log_init_t(const char* dir, log_lvl_t lvl,const char* pre_name,int logtime)$/;"	f
log_level	log_fun.c	/^static log_lvl_t   log_level  = log_lvl_debug;     \/\/ 缺省的日志等级$/;"	v	file:
log_level	tlog_decl.h	/^    tlog_lvl_t          log_level;$/;"	m	struct:_logger_ctrl_cfg
log_lvl	log_fun.h	/^typedef enum log_lvl $/;"	g
log_lvl_alert	log_fun.h	/^	log_lvl_alert,$/;"	e	enum:log_lvl
log_lvl_crit	log_fun.h	/^	log_lvl_crit,$/;"	e	enum:log_lvl
log_lvl_debug	log_fun.h	/^	log_lvl_debug,$/;"	e	enum:log_lvl
log_lvl_emerg	log_fun.h	/^	log_lvl_emerg,$/;"	e	enum:log_lvl
log_lvl_error	log_fun.h	/^	log_lvl_error,$/;"	e	enum:log_lvl
log_lvl_info	log_fun.h	/^	log_lvl_info,$/;"	e	enum:log_lvl
log_lvl_max	log_fun.h	/^	log_lvl_max$/;"	e	enum:log_lvl
log_lvl_notice	log_fun.h	/^	log_lvl_notice,$/;"	e	enum:log_lvl
log_lvl_t	log_fun.h	/^} log_lvl_t;$/;"	t	typeref:enum:log_lvl
log_lvl_trace	log_fun.h	/^	log_lvl_trace,$/;"	e	enum:log_lvl
log_lvl_warning	log_fun.h	/^	log_lvl_warning,$/;"	e	enum:log_lvl
log_pre	log_fun.c	/^static char        log_pre[32];                    \/\/ log文件名的前缀$/;"	v	file:
log_size	log_fun.c	/^static uint32_t    log_size;                       \/\/ 日志大小$/;"	v	file:
logdir	tlog_decl.h	/^	char				logdir[FILENAME_MAX];$/;"	m	struct:_logger
logfile	tlog_decl.h	/^	logfile_t			logfile[tlog_lvl_max];$/;"	m	struct:_logger
logfile_t	tlog_decl.h	/^}logfile_t;$/;"	t	typeref:struct:_logfile_info
logger	tlog.c	/^logger_t          logger_struct         , *logger=&logger_struct;$/;"	v
logger_cmd	netutils.h	/^enum logger_cmd $/;"	g
logger_ctrl_cfg_struct	tlog.c	/^logger_ctrl_cfg_t logger_ctrl_cfg_struct, *ctrl_cfg = &logger_ctrl_cfg_struct;$/;"	v
logger_ctrl_cfg_t	tlog_decl.h	/^}logger_ctrl_cfg_t;$/;"	t	typeref:struct:_logger_ctrl_cfg
logger_ctrl_pkg_t	netutils.h	/^}logger_ctrl_pkg_t;$/;"	t	typeref:struct:_logger_ctrl_pkg
logger_flag_file	tlog_decl.h	/^	logger_flag_file			= 0x1,$/;"	e	enum:logger_flag_t
logger_flag_forceflush	tlog_decl.h	/^	logger_flag_forceflush		= 0x80000000,$/;"	e	enum:logger_flag_t
logger_flag_t	tlog_decl.h	/^enum logger_flag_t $/;"	g
logger_flag_udp	tlog_decl.h	/^	logger_flag_udp				= 0x2,$/;"	e	enum:logger_flag_t
logger_set_rate_limit	netutils.h	/^} logger_set_rate_limit;$/;"	t	typeref:struct:_logger_set_rate_limit
logger_set_trace_addr	netutils.h	/^} logger_set_trace_addr;$/;"	t	typeref:struct:_logger_set_trace_addr
logger_set_trace_uid_t	netutils.h	/^} logger_set_trace_uid_t;$/;"	t	typeref:struct:_logger_set_trace_uid
logger_status_notinit	tlog_decl.h	/^    logger_status_notinit       = 0,$/;"	e	enum:logger_status_t
logger_status_stop	tlog_decl.h	/^    logger_status_stop          = 2,$/;"	e	enum:logger_status_t
logger_status_t	tlog_decl.h	/^enum logger_status_t $/;"	g
logger_status_writing	tlog_decl.h	/^    logger_status_writing       = 1,$/;"	e	enum:logger_status_t
logger_struct	tlog.c	/^logger_t          logger_struct         , *logger=&logger_struct;$/;"	v
logger_svc_info_struct	tlog.c	/^logger_svc_info_t logger_svc_info_struct, *svc_info = &logger_svc_info_struct;$/;"	v
logger_svc_info_t	tlog_decl.h	/^}logger_svc_info_t;$/;"	t	typeref:struct:_logger_svc_info
logger_t	tlog_decl.h	/^} logger_t;$/;"	t	typeref:struct:_logger
logger_udp_sink_t	tlog_decl.h	/^}logger_udp_sink_t;$/;"	t	typeref:struct:_logger_udp_sink
lognames	log_fun.c	/^static const char* lognames[] = $/;"	v	file:
main	main.c	/^int main(int argc,char *argv[])$/;"	f
max_fd_num	daemon.c	/^int max_fd_num;$/;"	v
max_listen_fds	bindconf.h	/^    max_listen_fds  = 500 $/;"	e	enum:__anon5
max_log_files	log_fun.c	/^static int         max_log_files;                  \/\/ 日志最大的文件数$/;"	v	file:
max_one_size	tlog_decl.h	/^    size_t              max_one_size;$/;"	m	struct:_logger_ctrl_cfg
mmap_config_file	config.c	/^int mmap_config_file(const char *file_name,char **buf)$/;"	f
my_lvl	tlog_decl.h	/^    tlog_lvl_t          my_lvl;$/;"	m	struct:_logfile_info
next	list.h	/^	struct list_head *next,*prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
now	timer.c	/^struct timeval now;$/;"	v	typeref:struct:timeval
now	tlog_decl.h	/^	time_t				now;$/;"	m	struct:_logger
on_client_conn_closed	dll.h	/^	void	(*on_client_conn_closed)(int fd);$/;"	m	struct:AsyncServInterface
on_fd_closed	dll.h	/^	void	(*on_fd_closed)(int fd);$/;"	m	struct:AsyncServInterface
online_id	bindconf.h	/^    uint32_t    online_id;$/;"	m	struct:bind_config_elem
online_name	bindconf.h	/^    char        online_name[16];$/;"	m	struct:bind_config_elem
opfd	log_fun.c	/^	int		opfd;$/;"	m	struct:fds_t	file:
page_size	net.c	/^int       page_size;$/;"	v
parse_args	main.c	/^static inline void parse_args(int argc,char **argv)$/;"	f	file:
parse_config	config.c	/^static int parse_config(char *buffer)$/;"	f	file:
pipe_handles	shmq.h	/^    int pipe_handles[2];$/;"	m	struct:shm_queue
pkg_trace_uid	netutils.h	/^	pkg_trace_uid_t		pkg_trace_uid[];$/;"	m	struct:_logger_set_trace_uid
pkg_trace_uid_t	netutils.h	/^} pkg_trace_uid_t;$/;"	t	typeref:struct:_pkg_trace_uid
placeholder	dll.h	/^	void	(*placeholder[9])(void);$/;"	m	struct:AsyncServInterface
port	netutils.h	/^	uint16_t			port;$/;"	m	struct:_logger_set_trace_addr
port	tlog_decl.h	/^    uint16_t            port;$/;"	m	struct:_logger_udp_sink
prefix	tlog_decl.h	/^	char				prefix[MAX_PREFIX_LEN];$/;"	m	struct:_logger
prev	list.h	/^	struct list_head *next,*prev;$/;"	m	struct:list_head	typeref:struct:list_head::
proc_events	dll.h	/^	void	(*proc_events)();$/;"	m	struct:AsyncServInterface
proc_logger_pkg	netutils.c	/^void proc_logger_pkg(int mfd, time_t now, char *recvbuf, ssize_t len, struct sockaddr_in *from, socklen_t fromlen)$/;"	f
proc_mcast_pkg	dll.h	/^	void	(*proc_mcast_pkg)(const void* data, int len);$/;"	m	struct:AsyncServInterface
proc_pkg_from_client	dll.h	/^	int		(*proc_pkg_from_client)(void* pkg, int pkglen, const fdsession_t* fdsess);$/;"	m	struct:AsyncServInterface
proc_pkg_from_serv	dll.h	/^	void	(*proc_pkg_from_serv)(int fd, void* pkg, int pkglen);$/;"	m	struct:AsyncServInterface
proc_udp_pkg	dll.h	/^	int		(*proc_udp_pkg)(int fd, const void* avail_data, int avail_len ,struct sockaddr_in * from, socklen_t fromlen );$/;"	m	struct:AsyncServInterface
procname	tlog_decl.h	/^    char                procname[MAX_PROCNAME_LEN]; \/\/ 进程名$/;"	m	struct:_logger_svc_info
prog_name	main.c	/^char *prog_name;$/;"	v
rate_limit	tlog_decl.h	/^    rate_limit_t        rate_limit;$/;"	m	struct:_logger_udp_sink
rate_limit_t	tlog_decl.h	/^}rate_limit_t;$/;"	t	typeref:struct:_rate_limit
recvbuf	tlog_decl.h	/^    char                recvbuf[8192];$/;"	m	struct:_logger_udp_sink
recvq	bindconf.h	/^    shm_queue_t recvq;$/;"	m	struct:bind_config_elem
register_data_plugin	dll.c	/^int register_data_plugin(const char* file_name)$/;"	f
reload_global_data	dll.h	/^	int		(*reload_global_data)();$/;"	m	struct:AsyncServInterface
remote_ip	service.h	/^	uint32_t	remote_ip;$/;"	m	struct:fdsession
remote_port	service.h	/^	uint16_t	remote_port;$/;"	m	struct:fdsession
renew_now	timer.h	/^static inline void renew_now()$/;"	f
request_log_seq	log_fun.c	/^static inline int request_log_seq(int lvl)$/;"	f	file:
restart	daemon.c	/^volatile int restart     = 0;$/;"	v
restart_cnt	bindconf.h	/^    uint8_t     restart_cnt;$/;"	m	struct:bind_config_elem
rlimit_reset	daemon.c	/^static inline void rlimit_reset()$/;"	f	file:
saved_argv	daemon.c	/^char** saved_argv = NULL;$/;"	v
self_thread_pid	tlog.c	/^static int32_t self_thread_pid;$/;"	v	file:
sendbuf	tlog_decl.h	/^    char                sendbuf[8192];$/;"	m	struct:_logger_udp_sink
sendfd	tlog_decl.h	/^    int                 sendfd;$/;"	m	struct:_logger_udp_sink
sendlog_to_ubp_sink	netutils.c	/^void sendlog_to_ubp_sink(const char* buffer,int len)$/;"	f
sendq	bindconf.h	/^    shm_queue_t sendq;$/;"	m	struct:bind_config_elem
seq	log_fun.c	/^	int		seq;$/;"	m	struct:fds_t	file:
seq	netutils.h	/^    uint32_t            seq;$/;"	m	struct:_logger_ctrl_pkg
severity_str	tlog.c	/^static char *severity_str[tlog_lvl_max] = $/;"	v	file:
shift_logger_file	tlog.c	/^int shift_logger_file(logfile_t *logfile)$/;"	f
shm_head	shmq.h	/^typedef struct shm_head$/;"	s
shm_head_t	shmq.h	/^} __attribute__ ((packed)) shm_head_t;$/;"	t	typeref:struct:shm_head
shm_queue	shmq.h	/^typedef struct shm_queue$/;"	s
shm_queue_t	shmq.h	/^} shm_queue_t;$/;"	t	typeref:struct:shm_queue
show_banner	main.c	/^static inline void show_banner()$/;"	f	file:
show_usage	main.c	/^static inline void show_usage()$/;"	f	file:
sigchld_handler	daemon.c	/^static void sigchld_handler(int signo, siginfo_t *si, void *p)$/;"	f	file:
signame	daemon.c	/^const char * const signame[] = $/;"	v
signup_handler	daemon.c	/^static void signup_handler(int signo)$/;"	f	file:
sigterm_handler	daemon.c	/^static void sigterm_handler(int signo)$/;"	f	file:
socket_timeout	net.c	/^time_t    socket_timeout;$/;"	v
status	daemon.c	/^static int      status;$/;"	v	file:
status	tlog_decl.h	/^	uint32_t			status;$/;"	m	struct:_logger
stop	daemon.c	/^volatile int stop        = 0;$/;"	v
stop_if_diskfull	tlog_decl.h	/^    int                 stop_if_diskfull;$/;"	m	struct:_logger_ctrl_cfg
str_split	config.c	/^int str_split(const char *ifs,char *line,char *field[],int n)$/;"	f
svc_info	tlog.c	/^logger_svc_info_t logger_svc_info_struct, *svc_info = &logger_svc_info_struct;$/;"	v
svcname	tlog_decl.h	/^    char                svcname[MAX_SVC_NAME_LEN];$/;"	m	struct:_logger_svc_info
svrtype	tlog_decl.h	/^    char                svrtype[MAX_SVRTYPE_LEN];$/;"	m	struct:_logger_svc_info
sync_service_info	dll.h	/^    void	(*sync_service_info)(uint32_t svr_id, const char* svr_name, const char* svr_ip, in_port_t port, int flag);$/;"	m	struct:AsyncServInterface
tail	shmq.h	/^    volatile int tail;$/;"	m	struct:shm_head
term_signal	daemon.c	/^volatile int term_signal = 0;$/;"	v
thread	tlog_decl.h	/^	pthread_t			thread;$/;"	m	struct:_logger
time_slice_no	tlog_decl.h	/^    int32_t             time_slice_no;$/;"	m	struct:_logfile_info
time_slice_secs	tlog_decl.h	/^    int32_t             time_slice_secs;$/;"	m	struct:_logger_ctrl_cfg
time_slice_seq	tlog_decl.h	/^    int32_t             time_slice_seq;$/;"	m	struct:_logfile_info
tlog_create_mcast_socket	netutils.c	/^int tlog_create_mcast_socket(const char* mcast_ip,int gameid, const char *ethx)$/;"	f
tlog_file_test	fileutils.c	/^int tlog_file_test (const char *filename, TFileTest test)$/;"	f
tlog_get_local_eth_ip	netutils.c	/^int tlog_get_local_eth_ip(const char *eth, struct in_addr *addr)$/;"	f
tlog_get_local_eth_ipstr	netutils.c	/^int tlog_get_local_eth_ipstr(const char *eth,char *ipbuf)$/;"	f
tlog_is_absolute_path	fileutils.c	/^int tlog_is_absolute_path(const char *file_name)$/;"	f
tlog_likely	tlog_decl.h	29;"	d
tlog_lvl	tlog_decl.h	/^typedef enum tlog_lvl $/;"	g
tlog_lvl_debug	tlog_decl.h	/^	tlog_lvl_debug				= 6,$/;"	e	enum:tlog_lvl
tlog_lvl_error	tlog_decl.h	/^	tlog_lvl_error				= 3,$/;"	e	enum:tlog_lvl
tlog_lvl_fatal	tlog_decl.h	/^	tlog_lvl_fatal				= 2,$/;"	e	enum:tlog_lvl
tlog_lvl_info	tlog_decl.h	/^	tlog_lvl_info				= 5,$/;"	e	enum:tlog_lvl
tlog_lvl_long	tlog_decl.h	/^	tlog_lvl_long				= 0,$/;"	e	enum:tlog_lvl
tlog_lvl_max	tlog_decl.h	/^	tlog_lvl_max,$/;"	e	enum:tlog_lvl
tlog_lvl_min	tlog_decl.h	/^	tlog_lvl_min				= 0,$/;"	e	enum:tlog_lvl
tlog_lvl_t	tlog_decl.h	/^} tlog_lvl_t;$/;"	t	typeref:enum:tlog_lvl
tlog_lvl_trace	tlog_decl.h	/^	tlog_lvl_trace				= 7,$/;"	e	enum:tlog_lvl
tlog_lvl_utrace	tlog_decl.h	/^	tlog_lvl_utrace				= 1,$/;"	e	enum:tlog_lvl
tlog_lvl_warn	tlog_decl.h	/^	tlog_lvl_warn				= 4,$/;"	e	enum:tlog_lvl
tlog_mcast_join	netutils.c	/^int tlog_mcast_join(int mfd, const struct sockaddr* grpaddr,socklen_t grpaddrlen,const char *ethx)$/;"	f
tlog_mkdir_with_parents	fileutils.c	/^int tlog_mkdir_with_parents(const char *pathname,int mode)$/;"	f
tlog_path_skip_root	fileutils.c	/^char *tlog_path_skip_root(const char *file_name)$/;"	f
tlog_set_socket_nonblock	netutils.c	/^int tlog_set_socket_nonblock(int sock)$/;"	f
tlog_set_socket_reuseaddr	netutils.c	/^void tlog_set_socket_reuseaddr(int sock)$/;"	f
tlog_unlikely	tlog_decl.h	30;"	d
tm_cur	timer.c	/^struct tm      tm_cur;$/;"	v	typeref:struct:tm
tm_now	tlog_decl.h	/^	struct tm			tm_now;$/;"	m	struct:_logger	typeref:struct:_logger::tm
tm_yday	tlog_decl.h	/^    int32_t             tm_yday;$/;"	m	struct:_logfile_info
toaddr	tlog_decl.h	/^    struct sockaddr_in  toaddr;$/;"	m	struct:_logger_udp_sink	typeref:struct:_logger_udp_sink::sockaddr_in
token	tlog_decl.h	/^    int32_t             token;$/;"	m	struct:_rate_limit
trace_uid_list	tlog_decl.h	/^    trace_uid_t         trace_uid_list[MAX_TRACE_UID_NUM];$/;"	m	struct:_logger_udp_sink
trace_uid_t	tlog_decl.h	/^}trace_uid_t;$/;"	t	typeref:struct:_trace_uid
udp_sink	tlog.c	/^logger_udp_sink_t udp_sink_struct       , *udp_sink = &udp_sink_struct;$/;"	v
udp_sink_server	netutils.c	/^void *udp_sink_server(void *args)$/;"	f
udp_sink_struct	tlog.c	/^logger_udp_sink_t udp_sink_struct       , *udp_sink = &udp_sink_struct;$/;"	v
uid	netutils.h	/^	uint32_t			uid;$/;"	m	struct:_pkg_trace_uid
uid	netutils.h	/^    uint32_t            uid;$/;"	m	struct:_logger_ctrl_pkg
uid	tlog_decl.h	/^    uint32_t            uid;$/;"	m	struct:_trace_uid
update_udp_sink_sockaddr	netutils.c	/^int update_udp_sink_sockaddr(void)$/;"	f
use_net_ctrl	tlog_decl.h	/^	uint8_t				use_net_ctrl;$/;"	m	struct:_logger
userid_t	types.h	/^    typedef uint32_t userid_t;$/;"	t
val	config.h	/^	char *val;$/;"	m	struct:config_pair
ver	netutils.h	/^    uint32_t            ver;$/;"	m	struct:_logger_ctrl_pkg
version	main.c	/^static const char version[] = "1.6.4.1";$/;"	v	file:
write_to_logger	tlog.c	/^void write_to_logger(int lvl,const char *logtype,uint32_t uid,uint32_t flag,const char* fmt,...)$/;"	f
